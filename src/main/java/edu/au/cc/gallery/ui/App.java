/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.au.cc.gallery.ui;

import java.sql.SQLException;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.io.*;
import java.nio.ByteBuffer;
import java.nio.file.*;
import javax.servlet.MultipartConfigElement;
import javax.servlet.http.Part;
import javax.servlet.ServletException;

import spark.ModelAndView;
import spark.template.handlebars.HandlebarsTemplateEngine;
import static spark.Spark.*;
import spark.Request;
import spark.Response;

import edu.au.cc.gallery.aws.S3;
import edu.au.cc.gallery.data.Postgres;
import edu.au.cc.gallery.data.UserDAO;
import edu.au.cc.gallery.data.User;
import edu.au.cc.gallery.data.ImageDAO;
import edu.au.cc.gallery.data.Image;
import edu.au.cc.gallery.tools.UserAdmin;
import edu.au.cc.gallery.tools.Auth;

public class App {


    private static UserDAO getUserDAO() throws SQLException {
        return Postgres.getUserDAO();
    }

    private static ImageDAO getImageDAO() throws SQLException {
        return Postgres.getImageDAO();
    }



    public static void main(String[] args) throws SQLException {

	File uploadDir = new File("upload");
        uploadDir.mkdir();	
	staticFiles.externalLocation("upload");
		
	String portString = System.getenv("JETTY_PORT");
	
	if (portString == null || portString.equals("")) {	
		port(8888);
	} else {
		port(Integer.parseInt(portString));
	}

	staticFiles.location("/public");

	redirect.get("/", "/login");

        get("/login", (req, res) -> {
                Map<String, Object> model = new HashMap<String, Object>();
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "login.hbs"));
                });

	post("/login", (req, res) -> Auth.login(req, res));

        get("/images/home", (req, res) -> {
                Map<String, Object> model = new HashMap<String, Object>();
                //model.put("name", req.queryParams("name"));
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "home.hbs"));
                });

	get("/logout", (req, res) -> Auth.logout(req, res));

        get("/images/list", (req, res) -> {
                Map<String, Object> model = new HashMap<String, Object>();
                ArrayList<Map> alimages = new ArrayList();
                User u = getUserDAO().getUserByUsername(req.session().attribute("user"));
                List<Image> il = getImageDAO().getImages(u);

                il.forEach((i) -> {
                                        Map<String, Object> temp = new HashMap<String, Object>();
                                        temp.put("image", i.toString());
					temp.put("filename", i.getFilename());
                                        alimages.add(temp);
                                  });
                model.put("images", alimages);

                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "images.hbs"));
                });

        get("/images/upload", (req, res) -> {
                Map<String, Object> model = new HashMap<String, Object>();
                //model.put("name", req.queryParams("name"));
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "upload.hbs"));
                });

	post("/images/upload", (req, res) -> {
		Path tempFile = Files.createTempFile(uploadDir.toPath(), "", "");

                req.attribute("org.eclipse.jetty.multipartConfig", new MultipartConfigElement("/temp"));

                try (InputStream input = req.raw().getPart("img_file").getInputStream()) {
			byte[] bytes = input.readAllBytes();

	               // Files.copy(input, tempFile, StandardCopyOption.REPLACE_EXISTING);
		
		logInfo(req, tempFile);

		String username = req.session().attribute("user");
		User u = getUserDAO().getUserByUsername(username);
		Image img = new Image(u.getS3id(), getFileName(req.raw().getPart("img_file")));
	        img.setData(ByteBuffer.wrap(bytes));

		getImageDAO().addImage(img);
		//S3 s3 = new S3();
		//s3.connect();
		//s3.putObject(String.valueOf(u.getS3id())+"/"+getFileName(req.raw().getPart("img_file")), ByteBuffer.wrap(bytes));
		}
		res.redirect("/images/home");
		return "";
	});

        before("/images/*", (request, response) -> {
                UserAdmin ua = new UserAdmin();
                ua.checkUser(request, response);
                });

	before("/admin", (request, response) -> {
		UserAdmin ua = new UserAdmin();
		ua.checkAdmin(request, response);
		});

        before("/admin/*", (request, response) -> {
                UserAdmin ua = new UserAdmin();
                ua.checkAdmin(request, response);
                });


	get("/admin", (req, res) -> {
		Map<String, Object> model = new HashMap<String, Object>();
		ArrayList<String> al = new ArrayList();
		ArrayList<Map> alusers = new ArrayList();
		UserAdmin ua = new UserAdmin();
		al = ua.listUsersNames();
		
		al.forEach((i) -> {
					Map<String, Object> temp = new HashMap<String, Object>();
					temp.put("username", i);
					alusers.add(temp);
				  });
		model.put("users", alusers);
		return new HandlebarsTemplateEngine().render(new ModelAndView(model, "admin.hbs"));
		});

	get("/admin/edituser", (req, res) -> {
                Map<String, Object> model = new HashMap<String, Object>();
		model.put("name", req.queryParams("name"));
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "edit.hbs"));
                });

        get("/admin/edited", (req, res) -> {
                UserAdmin ua = new UserAdmin();
                Map<String, Object> model = new HashMap<String, Object>();

		if (req.queryParams("name").equals("")) {
			return new HandlebarsTemplateEngine().render(new ModelAndView(model, "inputoops.hbs"));
                }

		boolean success = ua.editUser(req.queryParams("name"), req.queryParams("password"), req.queryParams("fullName"));
		model.put("name", req.queryParams("name"));

		return new HandlebarsTemplateEngine().render(new ModelAndView(model, "edited.hbs"));
                });


	get("/admin/deleteuser", (req, res) -> {
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("name", req.queryParams("name"));
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "delete.hbs"));
                });

        get("/admin/deleted", (req, res) -> {
                UserAdmin ua = new UserAdmin();
		Map<String, Object> model = new HashMap<String, Object>();

		if (req.queryParams("name").equals("")) {
                        return new HandlebarsTemplateEngine().render(new ModelAndView(model, "inputoops.hbs"));
                }

		ua.deleteUser(req.queryParams("name"));
		model.put("name", req.queryParams("name"));

		return new HandlebarsTemplateEngine().render(new ModelAndView(model, "deleted.hbs"));
                });


	get("/admin/createuser", (req, res) -> {
		Map<String, Object> model = new HashMap<String, Object>();
		return new HandlebarsTemplateEngine().render(new ModelAndView(model, "create.hbs"));
                });

        get("/admin/created", (req, res) -> {
	
		UserAdmin ua = new UserAdmin();
		Map<String, Object> model = new HashMap<String, Object>();
	
                if (req.queryParams("name").equals("")) {
                	return new HandlebarsTemplateEngine().render(new ModelAndView(model, "inputoops.hbs"));
                }

		ua.addUser(req.queryParams("name"), req.queryParams("password"), req.queryParams("fullName"));
		model.put("name", req.queryParams("name"));

                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "created.hbs"));
                });


        get("/admin/inputoops", (req, res) -> {
                Map<String, Object> model = new HashMap<String, Object>();
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "inputoops.hbs"));
                });

	get("/sessionDemo", (req, res) -> Auth.sessionDemo(req, res));

	get("/debugSession", (req, res) -> Auth.debugSession(req, res));

    }

    private static void logInfo(Request req, Path tempFile) throws IOException, ServletException {
	    System.out.println("Uploaded: " +getFileName(req.raw().getPart("img_file")) + "'saved as '" + tempFile.toAbsolutePath() + "'");

    }

    private static String getFileName(Part part) {
	for (String cd : part.getHeader("content-disposition").split(";")) {
		if (cd.trim().startsWith("filename")) {
			return cd.substring(cd.indexOf('=') + 1).trim().replace("\"", "");
		}
	}
	return null;

    }
}
