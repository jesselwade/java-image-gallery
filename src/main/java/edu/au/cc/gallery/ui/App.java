/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.au.cc.gallery.ui;

import java.sql.SQLException;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;

import spark.ModelAndView;
import spark.template.handlebars.HandlebarsTemplateEngine;
import static spark.Spark.*;


import edu.au.cc.gallery.data.Postgres;
import edu.au.cc.gallery.data.UserDAO;
import edu.au.cc.gallery.tools.UserAdmin;
import edu.au.cc.gallery.tools.Auth;

public class App {


    private static UserDAO getUserDAO() throws SQLException {
        return Postgres.getUserDAO();
    }


    public static void main(String[] args) throws SQLException {
	
	String portString = System.getenv("JETTY_PORT");
	
	if (portString == null || portString.equals("")) {	
		port(5000);
	} else {
		port(Integer.parseInt(portString));
	}


        get("/login", (req, res) -> {
                Map<String, Object> model = new HashMap<String, Object>();
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "login.hbs"));
                });

	post("/login", (req, res) -> Auth.login(req, res));

        get("/", (req, res) -> {
		if (req.session().isNew()) {
			res.redirect("/login");
		}
                Map<String, Object> model = new HashMap<String, Object>();
                //model.put("name", req.queryParams("name"));
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "home.hbs"));
                });

	get("/logout", (req, res) -> Auth.logout(req, res));

        get("/images", (req, res) -> {
                Map<String, Object> model = new HashMap<String, Object>();
		//model.put("name", req.queryParams("name"));
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "images.hbs"));
                });

        get("/images/upload", (req, res) -> {
                Map<String, Object> model = new HashMap<String, Object>();
                //model.put("name", req.queryParams("name"));
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "upload.hbs"));
                });

	before("/admin/*", (request, response) -> {
		UserAdmin ua = new UserAdmin();
		ua.checkAdmin(request, response);
		});

	get("/admin", (req, res) -> {
		Map<String, Object> model = new HashMap<String, Object>();
		ArrayList<String> al = new ArrayList();
		ArrayList<Map> alusers = new ArrayList();
		UserAdmin ua = new UserAdmin();
		al = ua.listUsersNames();
		
		al.forEach((i) -> {
					Map<String, Object> temp = new HashMap<String, Object>();
					temp.put("username", i);
					alusers.add(temp);
				  });
		model.put("users", alusers);
		return new HandlebarsTemplateEngine().render(new ModelAndView(model, "admin.hbs"));
		});

	get("/admin/edituser", (req, res) -> {
                Map<String, Object> model = new HashMap<String, Object>();
		model.put("name", req.queryParams("name"));
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "edit.hbs"));
                });

        get("/admin/edited", (req, res) -> {
                UserAdmin ua = new UserAdmin();
                Map<String, Object> model = new HashMap<String, Object>();

		if (req.queryParams("name").equals("")) {
			return new HandlebarsTemplateEngine().render(new ModelAndView(model, "inputoops.hbs"));
                }

		boolean success = ua.editUser(req.queryParams("name"), req.queryParams("password"), req.queryParams("fullName"));
		model.put("name", req.queryParams("name"));

		return new HandlebarsTemplateEngine().render(new ModelAndView(model, "edited.hbs"));
                });


	get("/admin/deleteuser", (req, res) -> {
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("name", req.queryParams("name"));
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "delete.hbs"));
                });

        get("/admin/deleted", (req, res) -> {
                UserAdmin ua = new UserAdmin();
		Map<String, Object> model = new HashMap<String, Object>();

		if (req.queryParams("name").equals("")) {
                        return new HandlebarsTemplateEngine().render(new ModelAndView(model, "inputoops.hbs"));
                }

		ua.deleteUser(req.queryParams("name"));
		model.put("name", req.queryParams("name"));

		return new HandlebarsTemplateEngine().render(new ModelAndView(model, "deleted.hbs"));
                });


	get("/admin/createuser", (req, res) -> {
		Map<String, Object> model = new HashMap<String, Object>();
		return new HandlebarsTemplateEngine().render(new ModelAndView(model, "create.hbs"));
                });

        get("/admin/created", (req, res) -> {
	
		UserAdmin ua = new UserAdmin();
		Map<String, Object> model = new HashMap<String, Object>();
	
                if (req.queryParams("name").equals("")) {
                	return new HandlebarsTemplateEngine().render(new ModelAndView(model, "inputoops.hbs"));
                }

		ua.addUser(req.queryParams("name"), req.queryParams("password"), req.queryParams("fullName"));
		model.put("name", req.queryParams("name"));

                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "created.hbs"));
                });


        get("/admin/inputoops", (req, res) -> {
                Map<String, Object> model = new HashMap<String, Object>();
                return new HandlebarsTemplateEngine().render(new ModelAndView(model, "inputoops.hbs"));
                });

	get("/sessionDemo", (req, res) -> Auth.sessionDemo(req, res));

	get("/debugSession", (req, res) -> Auth.debugSession(req, res));

    }
}
